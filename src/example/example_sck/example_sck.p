// example_sck.p
// Compile like so:
// pasm -b example_sck.p
//

// ---------------------------------------------------------------------
// BBB-DMIC-INMP441-00A0 Device Tree Overlay
//
// ---- Inputs ----
// On the P8 header pins 39-46 are for digital microphone input.
// Pin-Name    Header-Pin  Purpose  Register-Bit
// ---------   ----------  -------  ------------
// LCD_DATA0      P8.45     SD0     PRU1_R31_0  // Line 0
// LCD_DATA1      P8.46     SD1     PRU1_R31_1  // Line 1
// LCD_DATA2      P8.43     SD2     PRU1_R31_2  // Line 2
// LCD_DATA3      P8.44     SD3     PRU1_R31_3  // Line 3
// LCD_DATA4      P8.41     SD4     PRU1_R31_4  // Line 4
// LCD_DATA5      P8.42     SD5     PRU1_R31_5  // Line 5
// LCD_DATA6      P8.39     SD6     PRU1_R31_6  // Line 6
// LCD_DATA7      P8.40     SD7     PRU1_R31_7  // Line 7
//
// ---- Outputs ----
// On the P8 header pins 29-30 are for digital mic control signals.
// Pin-Name    Header-Pin  Purpose  Register-Bit
// ---------   ----------  -------  ------------
// LCD_HSYNC      P8.29     WS      PRU1_R30_9     // Channel Select
// LCD_PCLK       P8.28     SCK     PRU1_R30_10    // Microphone Clock
// LCD_DE         P8.30     UNUSED  PRU1_R30_11    // Chip Enable
//----------------------------------------------------------------------



//-------------------------------------------
// Spins to waste time.
// Uses 2*n + 1 clock cycles.
// The default register used for spinning is r0
// but an alternate register can be specified.
// Because the ldi instruction is used, n is limited to 65535.
//
// Usage:
//  spinner  // spins 2 clock cycle using register r0
//  spinner 16  // spins 33 clock cycles using register r0
//  spinner 10, r2  // spins 21 clock cycles using register r2
//
// NOTE: all labels within a macro are altered upon expansion to
// be unique. So you do not need to worry about SPIN and SPIN1 labels.
// @see SPRUHF8A-May 2012-Revised June 2013
//
// @param dst [default=r0] register used for spinning
// @param n [default=1] number of times to spin
.macro spinner
.mparam n=1, dst=r0
SPIN:
  ldi dst, n
SPIN1:
  sub dst, dst, 1
  qbne SPIN1, dst, 0
.endm

                 
//========== .origin ====================                 
// The origin command is used to specify a code offset in the PRU
// source file. Typically a single origin statement is specified
// before any instructions, but multiple origin commands can be
// specified in order to insert space into the code map.
//
// @page 38
// @section 5.3.2.1.2
//======================================= 
.origin 0  // start the next instruction at code offset 0

//========= .entrypoint ================= 
// The entry point command is used to specify the code entry point
// to the debugger, and stores the information in the debug output
// file (*.dbg). It has no effect on any other output file type.
// By default, PASM will set the entry point to the first
// instruction generated by the assembly.
// 
// @page 38
// @section 5.3.2.1.3
//======================================= 
.entrypoint START  // set the code entry point to the code label "START"


// PRU pin assignments:
// R30_10 SCK (system clock - microphone data clock)
// R30_9  WS  (word select - left/right channel select) 
//
// Register assignments:
// r0: scratch work
//
START:
  // Initialization
  
LETSDOTHIS:
  // First clock cycle
  set r30, 10  // drives SCK high
  spinner 15, r0  // spins 31 clock cycles
  
  clr r30, 10  // drives SCK low
  spinner 14, r0  // spins 29 clock cycles
  ldi r0, 0  // waste a clock cycle
  jmp LETSDOTHIS

EXIT:
  // We will never arrive here because of the infinite loop up above
  HALT



